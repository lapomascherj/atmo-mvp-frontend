/**
 * PROFESSIONAL PDF GENERATOR - Enhanced version for business-grade documents
 * Creates 3-4 page comprehensive documents with rich content and structure
 */

// Copy this to replace the generateSimplePDF function in supabase/functions/chat/index.ts

const generateProfessionalPDF = (params: {
  title: string
  documentType: string
  summary: string
  content: string
  userMessage: string
  userContext?: {
    userName?: string
    focusAreas?: string[]
    projects?: any[]
    onboardingData?: any
  }
}): string => {
  const { title, documentType, summary, content, userMessage, userContext } = params
  const doc = new jsPDF()

  // ATMO Branding Colors
  const atmoOrange = [255, 95, 31]
  const atmoPurple = [147, 51, 234]
  const darkGray = [51, 51, 51]
  const mediumGray = [100, 100, 100]
  const lightGray = [160, 160, 160]
  const veryLightGray = [220, 220, 220]

  let yPosition = 0
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  const contentWidth = pageWidth - (margin * 2)
  let pageNumber = 1

  // Helper: Add page header
  const addPageHeader = () => {
    doc.setFillColor(atmoOrange[0], atmoOrange[1], atmoOrange[2])
    doc.rect(0, 0, pageWidth, 12, 'F')
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(9)
    doc.setFont('helvetica', 'bold')
    doc.text('ATMO', margin, 8)
    doc.setFont('helvetica', 'normal')
    doc.setFontSize(8)
    doc.text(documentType.toUpperCase(), pageWidth - margin - 50, 8, { align: 'right' })
  }

  // Helper: Add page footer
  const addPageFooter = () => {
    const footerY = pageHeight - 12
    doc.setDrawColor(atmoOrange[0], atmoOrange[1], atmoOrange[2])
    doc.setLineWidth(0.3)
    doc.line(margin, footerY - 3, pageWidth - margin, footerY - 3)

    doc.setFontSize(7)
    doc.setTextColor(lightGray[0], lightGray[1], lightGray[2])
    doc.setFont('helvetica', 'italic')
    doc.text('Generated by ATMO AI', margin, footerY)
    doc.text(new Date().toLocaleDateString(), pageWidth / 2, footerY, { align: 'center' })
    doc.text(`Page ${pageNumber}`, pageWidth - margin, footerY, { align: 'right' })
  }

  // Helper: Check if need new page
  const checkPageBreak = (requiredSpace: number = 30) => {
    if (yPosition > pageHeight - margin - 25) {
      addPageFooter()
      doc.addPage()
      pageNumber++
      addPageHeader()
      yPosition = 25
    }
  }

  // Helper: Add section header
  const addSectionHeader = (text: string) => {
    checkPageBreak(20)
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
    doc.text(text, margin, yPosition)
    yPosition += 3
    doc.setDrawColor(atmoOrange[0], atmoOrange[1], atmoOrange[2])
    doc.setLineWidth(1)
    doc.line(margin, yPosition, margin + 30, yPosition)
    yPosition += 8
  }

  // Helper: Add body text
  const addBodyText = (text: string) => {
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
    const lines = doc.splitTextToSize(text, contentWidth)
    lines.forEach((line: string) => {
      checkPageBreak()
      doc.text(line, margin, yPosition)
      yPosition += 5
    })
    yPosition += 3
  }

  // Helper: Add bullet point
  const addBullet = (text: string, color: number[] = atmoOrange) => {
    checkPageBreak()
    doc.setTextColor(color[0], color[1], color[2])
    doc.setFontSize(10)
    doc.text('•', margin, yPosition)

    doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
    doc.setFontSize(9)
    const lines = doc.splitTextToSize(text, contentWidth - 5)
    lines.forEach((line: string, idx: number) => {
      if (idx > 0) checkPageBreak()
      doc.text(line, margin + 5, yPosition)
      yPosition += 4.5
    })
    yPosition += 2
  }

  // Helper: Add numbered item
  const addNumbered = (num: number, text: string) => {
    checkPageBreak()
    doc.setTextColor(atmoPurple[0], atmoPurple[1], atmoPurple[2])
    doc.setFontSize(9)
    doc.setFont('helvetica', 'bold')
    doc.text(`${num}.`, margin, yPosition)

    doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
    doc.setFont('helvetica', 'normal')
    const lines = doc.splitTextToSize(text, contentWidth - 7)
    lines.forEach((line: string, idx: number) => {
      if (idx > 0) checkPageBreak()
      doc.text(line, margin + 7, yPosition)
      yPosition += 4.5
    })
    yPosition += 2
  }

  // Extract content segments
  const extractSentences = (text: string, count: number = 10) => {
    return text.split(/[.!?]\s+/).filter(s => s.length > 15).slice(0, count)
  }

  const extractRecommendations = (text: string) => {
    return text.split(/[.!?]\s+/).filter(s =>
      /(should|recommend|suggest|consider|important|key|critical|ensure)/i.test(s) && s.length > 20
    ).slice(0, 6)
  }

  const extractActions = (text: string) => {
    return text.split(/[.!?]\s+/).filter(s =>
      /(implement|create|develop|build|launch|establish|set up|start)/i.test(s) && s.length > 20
    ).slice(0, 8)
  }

  // ===== PAGE 1: COVER & EXECUTIVE SUMMARY =====
  addPageHeader()
  yPosition = 30

  // Title
  doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
  doc.setFontSize(22)
  doc.setFont('helvetica', 'bold')
  const titleLines = doc.splitTextToSize(title, contentWidth)
  titleLines.forEach((line: string) => {
    doc.text(line, margin, yPosition)
    yPosition += 9
  })
  yPosition += 5

  // Document metadata
  doc.setFontSize(9)
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(mediumGray[0], mediumGray[1], mediumGray[2])
  doc.text(`Document Type: ${documentType}`, margin, yPosition)
  yPosition += 5
  doc.text(`Prepared: ${new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`, margin, yPosition)
  yPosition += 5
  if (userContext?.userName) {
    doc.text(`Prepared for: ${userContext.userName}`, margin, yPosition)
    yPosition += 5
  }
  yPosition += 10

  // Decorative divider
  doc.setDrawColor(atmoOrange[0], atmoOrange[1], atmoOrange[2])
  doc.setLineWidth(2)
  doc.line(margin, yPosition, pageWidth - margin, yPosition)
  yPosition += 15

  // Executive Summary
  addSectionHeader('EXECUTIVE SUMMARY')
  addBodyText(summary)
  yPosition += 5

  // Background & Context
  addSectionHeader('BACKGROUND & CONTEXT')
  addBodyText(`This ${documentType.toLowerCase()} was developed in response to: "${userMessage}"`)
  yPosition += 3
  if (userContext?.focusAreas && userContext.focusAreas.length > 0) {
    addBodyText(`Current focus areas: ${userContext.focusAreas.join(', ')}`)
  }
  yPosition += 8

  // Key Highlights
  addSectionHeader('KEY HIGHLIGHTS')
  const highlights = extractSentences(content, 5)
  highlights.forEach(highlight => {
    addBullet(highlight.trim())
  })

  addPageFooter()

  // ===== PAGE 2: DETAILED STRATEGY =====
  doc.addPage()
  pageNumber++
  addPageHeader()
  yPosition = 25

  addSectionHeader('DETAILED STRATEGY & APPROACH')
  const strategySentences = extractSentences(content, 8)
  strategySentences.forEach((sentence, idx) => {
    if (idx % 2 === 0 && idx > 0) yPosition += 3
    addBodyText(sentence.trim())
  })
  yPosition += 8

  addSectionHeader('STRATEGIC RECOMMENDATIONS')
  const recommendations = extractRecommendations(content)
  if (recommendations.length > 0) {
    recommendations.forEach(rec => {
      addBullet(rec.trim(), atmoPurple)
    })
  } else {
    addBodyText('Review the strategy above and prioritize implementation based on your current resources and timeline.')
  }

  addPageFooter()

  // ===== PAGE 3: IMPLEMENTATION =====
  doc.addPage()
  pageNumber++
  addPageHeader()
  yPosition = 25

  addSectionHeader('IMPLEMENTATION ROADMAP')

  // Timeline
  doc.setFontSize(10)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(atmoPurple[0], atmoPurple[1], atmoPurple[2])
  doc.text('Phase 1: Foundation (Weeks 1-2)', margin, yPosition)
  yPosition += 6
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(9)
  doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
  addBodyText('• Set up core infrastructure and resources\n• Establish team roles and responsibilities\n• Define success metrics and KPIs')
  yPosition += 3

  doc.setFontSize(10)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(atmoPurple[0], atmoPurple[1], atmoPurple[2])
  doc.text('Phase 2: Execution (Weeks 3-6)', margin, yPosition)
  yPosition += 6
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(9)
  doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
  addBodyText('• Launch initial initiatives and campaigns\n• Monitor performance and gather feedback\n• Make iterative improvements based on data')
  yPosition += 3

  doc.setFontSize(10)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(atmoPurple[0], atmoPurple[1], atmoPurple[2])
  doc.text('Phase 3: Optimization (Weeks 7-8)', margin, yPosition)
  yPosition += 6
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(9)
  doc.setTextColor(darkGray[0], darkGray[1], darkGray[2])
  addBodyText('• Analyze results against KPIs\n• Scale successful initiatives\n• Document lessons learned and best practices')
  yPosition += 8

  addSectionHeader('ACTION ITEMS & NEXT STEPS')
  const actions = extractActions(content)
  if (actions.length > 0) {
    actions.forEach((action, idx) => {
      addNumbered(idx + 1, action.trim())
    })
  } else {
    addNumbered(1, 'Review and validate the strategic recommendations above')
    addNumbered(2, 'Allocate resources and budget for implementation')
    addNumbered(3, 'Establish timeline and assign ownership for each initiative')
    addNumbered(4, 'Set up tracking and reporting mechanisms')
    addNumbered(5, 'Schedule regular review meetings to monitor progress')
  }

  addPageFooter()

  // ===== PAGE 4: METRICS & RESOURCES =====
  doc.addPage()
  pageNumber++
  addPageHeader()
  yPosition = 25

  addSectionHeader('SUCCESS METRICS & KPIs')
  addBodyText('Track these key performance indicators to measure success:')
  yPosition += 3
  addBullet('Completion rate of action items and milestones')
  addBullet('ROI and cost-effectiveness metrics')
  addBullet('User engagement and satisfaction scores')
  addBullet('Time-to-market and delivery speed')
  addBullet('Team productivity and collaboration metrics')
  yPosition += 5

  addSectionHeader('RISK ASSESSMENT')
  addBodyText('Potential risks to consider and mitigation strategies:')
  yPosition += 3
  addNumbered(1, 'Resource constraints: Prioritize initiatives based on impact and allocate budget accordingly')
  addNumbered(2, 'Timeline delays: Build buffer time into schedule and maintain agile approach')
  addNumbered(3, 'Market changes: Establish monitoring systems and be prepared to pivot strategy')
  yPosition += 5

  addSectionHeader('RESOURCE REQUIREMENTS')
  addBodyText('Key resources needed for successful implementation:')
  yPosition += 3
  addBullet('Team: Cross-functional team with clear roles and responsibilities')
  addBullet('Tools: Project management software, analytics platforms, collaboration tools')
  addBullet('Budget: Allocate funds for tools, marketing, development, and contingency')
  addBullet('Time: Dedicated time commitment from stakeholders and team members')
  yPosition += 5

  addSectionHeader('RECOMMENDED TOOLS & PLATFORMS')
  addBodyText('Consider these tools to support implementation:')
  yPosition += 3
  addBullet('Project Management: Asana, Linear, or Notion for task tracking')
  addBullet('Analytics: Google Analytics, Mixpanel, or Amplitude for data tracking')
  addBullet('Collaboration: Slack, Discord, or Microsoft Teams for communication')
  addBullet('Documentation: Confluence, Notion, or Google Docs for knowledge base')

  addPageFooter()

  // Return base64
  const pdfOutput = doc.output('datauristring')
  return pdfOutput.split(',')[1]
}
